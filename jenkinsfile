pipeline {
    agent {
        docker {
            image 'maven:3.8.1-openjdk-17-slim'
            args '-u root -v /var/run/docker.sock:/var/run/docker.sock -v /usr/bin/docker:/usr/bin/docker'
        }
    }

    environment {
        PATH = "/usr/bin:$PATH" // Add Docker binary to PATH
        DOCKER_IMAGE = "vishwa275/javaimage"
        DOCKER_REGISTRY_CREDENTIALS = "dockerhub-credentials-id"
    }

    stages {
        stage('Debug Environment') {
            steps {
                script {
                    sh '''
                    echo "=== Debugging Docker Environment ==="
                    echo "PATH: $PATH"
                    echo "User Info: $(id)"
                    echo "Group Info: $(groups || echo 'Group retrieval failed')"
                    echo "Docker Location: $(which docker || echo 'Docker binary not found')"
                    docker --version || echo "Docker is not accessible"
                    '''
                }
            }
        }

        stage('Clone Repository') {
            steps {
                echo "Cloning Repository..."
                git branch: 'master', url: 'https://github.com/Vishwasoratur/SimpleJavaWebApp-Deployment.git'
            }
        }

        stage('Build Application') {
            steps {
                echo "Building Application with Maven..."
                sh 'mvn clean package -DskipTests'
            }
        }

        stage('Build Docker Image') {
            steps {
                echo "Building Docker Image..."
                script {
                    sh 'docker build -t $DOCKER_IMAGE .'
                }
            }
        }

        stage('Test Docker Image') {
            steps {
                echo "Testing Docker Image..."
                script {
                    sh 'docker run --rm $DOCKER_IMAGE'
                }
            }
        }

        stage('Push Docker Image') {
            steps {
                echo "Pushing Docker Image to Docker Hub..."
                script {
                    withCredentials([usernamePassword(
                        credentialsId: "$DOCKER_REGISTRY_CREDENTIALS", 
                        passwordVariable: 'DOCKER_PASSWORD', 
                        usernameVariable: 'DOCKER_USERNAME')]) {
                        sh '''
                        echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin
                        docker push $DOCKER_IMAGE
                        '''
                    }
                }
            }
        }
    }

    post {
        always {
            echo "Pipeline completed."
        }
        success {
            echo "Pipeline succeeded."
        }
        failure {
            echo "Pipeline failed."
        }
    }
}
